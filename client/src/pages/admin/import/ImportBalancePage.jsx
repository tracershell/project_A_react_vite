// client/src/pages/admin/import/ImportBalancePage.jsx

import React, { useEffect, useState, useRef } from 'react';
import axios from 'axios';
import styles from './ImportBalancePage.module.css';
import { useLocation, useNavigate } from 'react-router-dom';

const ImportBalancePage = () => {
  const location = useLocation();
  const navigate = useNavigate();

  // temp / final 선택
  const [dataSource, setDataSource] = useState('temp');
  // ImportPoPage 에서 넘어온 initial rows, vendor 정보
  const { rows = [], vendor_id, vendor_name, deposit_rate } = location.state || {};

  // 레코드, 필터링, 검색, 합계 등 상태
  const [records, setRecords] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [bpDate, setBpDate] = useState('');
  const [exRate, setExRate] = useState('');
  const [search, setSearch] = useState({ bp_date: '', style: '', po_no: '' });
  const [totalRmb, setTotalRmb] = useState(0);
  const [totalUsd, setTotalUsd] = useState(0);

  // Extra Pay 입력폼 상태
  const [extraList, setExtraList] = useState([]);
  const [extraForm, setExtraForm] = useState({
    extra_no: '',
    po_no: '',
    rate_apply: '',
    comment: '',
    amount: ''
  });
  const [autoGeneratedPoNo, setAutoGeneratedPoNo] = useState('');
  const [autoRateApply, setAutoRateApply] = useState('');
  const inputsRef = useRef([]);
  const [comments, setComments] = useState({});

  // final 모드에서 사용할 날짜 옵션
  const [availableDates, setAvailableDates] = useState([]);

  // 문자열 또는 Date → YYYY-MM-DD
  const cleanDate = (d) => {
    if (!d) return '';
    if (typeof d === 'string' && d.includes('-')) return d;
    const dt = new Date(d);
    return dt.toISOString().split('T')[0];
  };

  // -------------------------
  // mount: 초기 로드
  useEffect(() => {
    if (rows.length > 0) {
      setRecords(rows);
    } else {
      fetchBalanceTemp();
    }
    fetchExtraList();
  }, []);

  // dataSource 변경 시 재조회
  useEffect(() => {
    fetchRecords();
    setSearch({ bp_date: '', style: '', po_no: '' });
  }, [dataSource]);

  // final 에서 bp_date 옵션 불러오기
  useEffect(() => {
    if (dataSource === 'final') {
      axios.get('/api/admin/import/balance/dates')
        .then(res => setAvailableDates(res.data))
        .catch(err => console.error('❌ bp_date 목록 실패', err));
    }
  }, [dataSource]);

  // -------------------------
  // fetch temp / final 리스트
  const fetchBalanceTemp = () => {
    axios.get('/api/admin/import/balance/temp', { withCredentials: true })
      .then(({ data }) => setRecords(data))
      .catch(() => { });
  };
  const fetchRecords = () => {
    const url = dataSource === 'temp'
      ? '/api/admin/import/balance/temp'
      : '/api/admin/import/balance/final';
    axios.get(url, { withCredentials: true })
      .then(({ data }) => setRecords(data))
      .catch(() => alert('데이터 불러오기 실패'));
  };

  // Extra 리스트
  const fetchExtraList = () => {
    axios.get('/api/admin/import/extra', { withCredentials: true })
      .then(({ data }) => setExtraList(data))
      .catch(() => { });
  };

  // -------------------------
  // Extra 선택 시 자동 po_no 및 rate_apply 세팅
  useEffect(() => {
    if (!extraForm.extra_no) {
      setAutoRateApply('');
      setExtraForm(f => ({ ...f, po_no: '', rate_apply: '', comment: '', amount: '' }));
      setAutoGeneratedPoNo('');
      return;
    }
    const item = extraList.find(x => x.extra_no === extraForm.extra_no);
    if (item) {
      setAutoRateApply(item.rate_apply);
      const now = new Date();
      const YY = String(now.getFullYear()).slice(-2);
      const MM = String(now.getMonth() + 1).padStart(2, '0');
      const DD = String(now.getDate()).padStart(2, '0');
      const hh = String(now.getHours()).padStart(2, '0');
      const mm = String(now.getMinutes()).padStart(2, '0');
      const ss = String(now.getSeconds()).padStart(2, '0');
      const code = `${YY}${MM}${DD}${hh}${mm}${ss}`;
      const po_no = `${item.po_no || 'EXTRA'}-${code}`;
      setAutoGeneratedPoNo(po_no);
      setExtraForm(f => ({
        ...f,
        po_no,
        rate_apply: item.rate_apply
      }));
    }
  }, [extraForm.extra_no, extraList]);

  const handleExtraChange = e => {
    const { name, value } = e.target;
    setExtraForm(f => ({ ...f, [name]: value }));
  };

  // -------------------------
  // Extra Pay 추가
  const handleAddExtra = async () => {
    const { extra_no, po_no, rate_apply, comment, amount } = extraForm;
    if (!extra_no || !po_no || !rate_apply || !amount) {
      return alert('모든 Extra Pay 항목을 입력하세요');
    }
    let bp_amount_rmb = 0, bp_amount_usd = 0, bp_exrate = null;
    if (rate_apply === '환율적용') {
      bp_amount_rmb = Number(amount);
    } else {
      bp_amount_usd = Number(amount);
      bp_exrate = 1;
    }
    const today = cleanDate(new Date());
    const vid = vendor_id || records[0]?.vendor_id;
    const vname = vendor_name || records[0]?.vendor_name;
    const vrate = deposit_rate || records[0]?.deposit_rate;

    try {
      // PO master 에도 추가
      await axios.post('/api/admin/import/balance/po/add', {
        vendor_id: vid,
        po_date: today,
        style_no: extra_no,
        po_no,
        pcs: 0,
        cost_rmb: 0,
        note: `[EXTRA] ${comment}`
      }, { withCredentials: true });

      // 화면에만 추가 (temp DB 는 추가 안 함)
      setRecords(rs => [
        ...rs,
        {
          id: po_no,
          vendor_id: vid,
          vendor_name: vname,
          deposit_rate: vrate,
          po_date: today,
          style_no: extra_no,
          po_no,
          pcs: 0,
          cost_rmb: 0,
          t_amount_rmb: 0,
          dp_amount_rmb: 0,
          bp_amount_rmb,
          bp_amount_usd,
          bp_exrate,
          comment,
          isExtra: true
        }
      ]);

      setExtraForm({ extra_no: '', po_no: '', rate_apply: '', comment: '', amount: '' });
      setAutoGeneratedPoNo('');
      alert('Extra Pay 추가 완료');
    } catch {
      alert('Extra Pay 추가 오류');
    }
  };

  // -------------------------
  // 행 삭제
  const handleRemoveRow = async row => {
    const isExtra = row.isExtra || row.t_amount_rmb === 0;
    setRecords(rs => rs.filter(r => r.id !== row.id));
    try {
      if (isExtra) {
        await axios.delete(`/api/admin/import/balance/po/delete/${row.po_no}`, { withCredentials: true });
      } else {
        await axios.delete(`/api/admin/import/balance/temp/delete/${row.id}`, { withCredentials: true });
      }
    } catch {
      alert('삭제 오류');
    }
  };

  // 검색
  const handleSearch = () => {
    setFiltered(records.filter(r => {
      const md = dataSource === 'final'
        ? (!search.bp_date || r.bp_date === search.bp_date)
        : true;
      const ms = !search.style || r.style_no?.toLowerCase().includes(search.style.toLowerCase());
      const mp = !search.po_no || r.po_no?.toLowerCase().includes(search.po_no.toLowerCase());
      return md && ms && mp;
    }));
  };

  // PDF 보기 (필터된 or 전체)
  const handleFilteredPdf = async () => {
    try {
      const resp = await axios.post(
        '/api/admin/import/balance/pdf',
        {
          records: filtered.length ? filtered : records,
          date: bpDate,
          exrate: exRate
        },
        { responseType: 'blob' }
      );
      const url = window.URL.createObjectURL(new Blob([resp.data], { type: 'application/pdf' }));
      window.open(url);
    } catch {
      alert('PDF 생성 오류');
    }
  };

  // 환율 적용 → 화면 계산 + 서버 temp 업데이트
  const applyExRate = async () => {
    if (!bpDate || !exRate) {
      return alert('Pay Date와 Exchange Rate를 입력하세요');
    }
    const updated = records.map(r => {
      // Extra (환율비적용)
      if ((r.bp_exrate === 1) && r.bp_amount_rmb === 0) {
        return { ...r, bp_date: bpDate, bp_exrate: 1 };
      }
      const t = r.t_amount_rmb || (r.pcs * r.cost_rmb);
      const bpR = Number(((t * (100 - (r.deposit_rate || deposit_rate))) / 100).toFixed(2));
      return {
        ...r,
        bp_date: cleanDate(bpDate),
        bp_exrate: exRate,
        bp_amount_rmb: bpR,
        bp_amount_usd: exRate ? (bpR / parseFloat(exRate)).toFixed(2) : ''
      };
    });
    setRecords(updated);
    try {
      await axios.post('/api/admin/import/balance/temp/update', { rows: updated }, { withCredentials: true });
    } catch {
      alert('서버 저장 실패');
    }
  };

  // 실질 합계 계산
  useEffect(() => {
    let sumR = 0, sumU = 0;
    records.forEach(r => {
      const bp = r.bp_amount_rmb != null
        ? Number(r.bp_amount_rmb)
        : (r.pcs * r.cost_rmb * (100 - (r.deposit_rate || deposit_rate)) / 100);
      if (!isNaN(bp)) sumR += bp;
      const u = parseFloat(r.bp_amount_usd);
      if (!isNaN(u)) sumU += u;
    });
    setTotalRmb(sumR);
    setTotalUsd(sumU);
    setFiltered(records);
  }, [records, deposit_rate]);

  // 페이지 언마운트 시 temp clear
  useEffect(() => {
    return () => {
      axios.delete('/api/admin/import/balance/temp/clear').catch(() => { });
    };
  }, []);

  // 커밋 (Pay)
  const handlePay = async () => {
    if (!bpDate || !exRate) return alert('BP Date/Exchange Rate를 입력하세요');
    const cleaned = records.map(r => ({
      ...r,
      po_date: cleanDate(r.po_date),
      bp_date: cleanDate(bpDate),
      bp_exrate: r.bp_exrate || exRate,
      bp_amount_rmb: r.bp_amount_rmb || 0,
      bp_amount_usd: r.bp_amount_usd || 0,
      vendor_id: r.vendor_id || vendor_id,
      vendor_name: r.vendor_name || vendor_name,
      deposit_rate: r.deposit_rate || deposit_rate,
      bp_status: 'paid'
    }));
    try {
      await axios.post(
        '/api/admin/import/balance/batchAdd',
        { rows: cleaned, vendor_id, vendor_name, deposit_rate },
        { withCredentials: true }
      );
      await axios.post(
        '/api/admin/import/balance/temp/commit',
        { bp_date: cleanDate(bpDate), bp_exrate: exRate },
        { withCredentials: true }
      );
      alert('정상 저장 완료');
      navigate('/admin/import/po');
    } catch {
      alert('저장 오류 발생');
    }
  };

  return (
    <div className={styles.page}>
      <h2>Extra Pay Input</h2>
      <div className={`${styles.formRow} ${styles.small}`}>
        <select name="extra_no" value={extraForm.extra_no} onChange={handleExtraChange}>
          <option value="">선택: Extra no.</option>
          {extraList.map(x => (
            <option key={x.id} value={x.extra_no}>{x.extra_no}</option>
          ))}
        </select>
        <input name="po_no" placeholder="Extra PO no." value={autoGeneratedPoNo} readOnly />
        <select name="rate_apply" value={autoRateApply || extraForm.rate_apply} readOnly>
          <option value="">선택</option>
          <option value="환율적용">환율적용</option>
          <option value="환율비적용">환율비적용</option>
        </select>
        <input name="comment" placeholder="Comment" value={extraForm.comment} onChange={handleExtraChange} />
        <input type="number" name="amount" placeholder="Amount" value={extraForm.amount} onChange={handleExtraChange} />
        <button onClick={handleAddExtra}>Extra Pay Add</button>
      </div>

      <h2>Balance Pay List</h2>
      <div className={styles.formRowGroup}>
        <div className={`${styles.formRow} ${styles.small}`}>
          <label>조회 대상:</label>
          <select value={dataSource} onChange={e => setDataSource(e.target.value)}>
            <option value="temp">임시 데이터</option>
            <option value="final">확정 데이터</option>
          </select>
          {dataSource === 'final' && (
            <select
              value={search.bp_date}
              onChange={e => {
                const v = e.target.value;
                if (!v) {
                  setSearch({ bp_date: '', style: '', po_no: '' });
                  setFiltered(records);
                  return;
                }
                setSearch(s => ({ ...s, bp_date: v }));
                setFiltered(records.filter(r => r.bp_date === v));
              }}
            >
              <option value="">:: 전체 날짜 보기 ::</option>
              {availableDates.map(d => (
                <option key={d} value={d}>{d}</option>
              ))}
            </select>
          )}
          <input
            placeholder="Style"
            value={search.style}
            onChange={e => setSearch(s => ({ ...s, style: e.target.value }))}
          />
          <input
            placeholder="PO no."
            value={search.po_no}
            onChange={e => setSearch(s => ({ ...s, po_no: e.target.value }))}
          />
          <button onClick={handleSearch}>검색</button>
          <button onClick={handleFilteredPdf}>PDF 보기</button>
        </div>
        <div className={`${styles.formRow} ${styles.small}`} style={{ marginTop: 4 }}>
          <span>Pay Date</span>
          <input type="date" value={bpDate} onChange={e => setBpDate(e.target.value)} />
          <span style={{ marginLeft: 16 }}>Exchange Rate</span>
          <input type="number" step="0.0001" value={exRate} onChange={e => setExRate(e.target.value)} />
          <button onClick={applyExRate} disabled={dataSource === 'final'}>환율적용</button>
          <button onClick={handlePay} disabled={dataSource === 'final'}>Pay</button>
        </div>
      </div>

      <div style={{ overflowX: 'auto' }}>
        <table className={styles.compactTable}>
          <thead>
            <tr>
              <th>선택제거</th>
              <th>Vendor Name</th>
              <th>Vendor Rate</th>
              <th>PO Date</th>
              <th>Style</th>
              <th>PO No.</th>
              <th>pcs</th>
              <th>cost(RMB)</th>
              <th>T.Amount(RMB)</th>
              <th>DP Amount(RMB)</th>
              <th>BP Amount(RMB)</th>
              <th>BP Date</th>
              <th>BP E.rate</th>
              <th>BP Amount(USD)</th>
              <th>Comment</th>
            </tr>
          </thead>
          <tbody>
            {(filtered.length ? filtered : records).map(r => (
              <tr key={r.id}>
                <td>
                  <button onClick={() => handleRemoveRow(r)} disabled={dataSource === 'final'}>
                    선택제거
                  </button>
                </td>
                <td>{r.vendor_name}</td>
                <td>{r.deposit_rate}</td>
                <td>{cleanDate(r.po_date)}</td>
                <td>{r.style_no}</td>
                <td>{r.po_no}</td>
                <td>{r.pcs}</td>
                <td>{r.cost_rmb}</td>
                <td>{(r.pcs * r.cost_rmb).toFixed(2)}</td>
                <td>{r.dp_amount_rmb?.toFixed(2)}</td>
                <td>{r.bp_amount_rmb?.toFixed(2)}</td>
                <td>{cleanDate(r.bp_date)}</td>
                <td>{r.bp_exrate}</td>
                <td>{r.bp_amount_usd}</td>
                <td>
                  <input
                    value={comments[r.id] ?? r.comment ?? ''}
                    onChange={e => setComments(c => ({ ...c, [r.id]: e.target.value }))}
                  />
                </td>
              </tr>
            ))}
          </tbody>
          <tfoot>
            <tr>
              <td colSpan={10} style={{ textAlign: 'right', fontWeight: 'bold' }}>합계</td>
              <td style={{ fontWeight: 'bold', color: 'darkred' }}>{totalRmb.toFixed(2)}</td>
              <td></td><td></td>
              <td style={{ fontWeight: 'bold', color: 'darkred' }}>{totalUsd.toFixed(2)}</td>
              <td></td>
            </tr>
          </tfoot>
        </table>
      </div>
    </div>
  );
};

export default ImportBalancePage;
