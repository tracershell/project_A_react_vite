// client/src/pages/admin/import/ImportBalancePage.jsx

import React, { useEffect, useState, useRef } from 'react';
import axios from 'axios';
import styles from './ImportBalancePage.module.css';
import { useLocation, useNavigate } from 'react-router-dom';

const ImportBalancePage = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { rows = [], vendor_id, vendor_name, deposit_rate } = location.state || {};

  const [dataSource, setDataSource] = useState('temp');  // 'temp' or 'final'
  const [records, setRecords] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [bpDate, setBpDate] = useState('');
  const [exRate, setExRate] = useState('');
  const [search, setSearch] = useState({ bp_date: '', style: '', po_no: '' });
  const [availableDates, setAvailableDates] = useState([]);
  const [extraList, setExtraList] = useState([]);
  const [extraForm, setExtraForm] = useState({ extra_no: '', po_no: '', rate_apply: '', comment: '', amount: '' });
  const [autoGeneratedPoNo, setAutoGeneratedPoNo] = useState('');
  const [autoRateApply, setAutoRateApply] = useState('');
  const [comments, setComments] = useState({});
  const [totalRmb, setTotalRmb] = useState(0);
  const [totalUsd, setTotalUsd] = useState(0);
  const inputsRef = useRef([]);

  const cleanDate = d => {
    if (!d) return '';
    if (typeof d === 'string' && d.includes('-')) return d;
    return new Date(d).toISOString().split('T')[0];
  };

  // 초기 로드
  useEffect(() => {
    if (rows.length > 0) {
      setRecords(rows);
    } else {
      fetchBalanceTemp();
    }
    fetchExtraList();
  }, []);

  // dataSource 변경 시
  useEffect(() => {
    fetchRecords();
    setSearch({ bp_date: '', style: '', po_no: '' });
  }, [dataSource]);

  // final 일 때 날짜 목록
  useEffect(() => {
    if (dataSource === 'final') {
      axios.get('/api/admin/import/balance/dates')
        .then(res => setAvailableDates(res.data))
        .catch(console.error);
    }
  }, [dataSource]);

  // 임시 fetch
  const fetchBalanceTemp = async () => {
    const { data } = await axios.get('/api/admin/import/balance/temp', { withCredentials: true });
    setRecords(data);
  };

  // temp/final fetch
  const fetchRecords = async () => {
    const url = dataSource === 'temp'
      ? '/api/admin/import/balance/temp'
      : '/api/admin/import/balance/final';
    try {
      const { data } = await axios.get(url, { withCredentials: true });
      setRecords(data);
    } catch {
      alert('데이터를 불러오는 데 실패했습니다.');
    }
  };

  // extra 목록
  const fetchExtraList = async () => {
    const { data } = await axios.get('/api/admin/import/extra', { withCredentials: true });
    setExtraList(data);
  };

  // extra 선택 시 자동 세팅
  useEffect(() => {
    const { extra_no } = extraForm;
    if (!extra_no) {
      setAutoGeneratedPoNo('');
      setAutoRateApply('');
      return;
    }
    const item = extraList.find(x => x.extra_no === extra_no);
    if (item) {
      setAutoRateApply(item.rate_apply || '');
      const now = new Date();
      const code = now.getTime();
      const po_no = `${item.po_no || 'EXTRA'}-${code}`;
      setAutoGeneratedPoNo(po_no);
      setExtraForm(f => ({ ...f, po_no, rate_apply: item.rate_apply }));
    }
  }, [extraForm.extra_no, extraList]);

  const handleExtraChange = e => {
    const { name, value } = e.target;
    setExtraForm(f => ({ ...f, [name]: value }));
  };

  // Extra 추가
  const handleAddExtra = async () => {
    const { extra_no, po_no, rate_apply, comment, amount } = extraForm;
    if (!extra_no || !po_no || !rate_apply || !amount) {
      return alert('모든 Extra Pay 항목을 입력하세요');
    }
    const today = cleanDate(new Date());
    const vid = vendor_id || records[0]?.vendor_id || '';
    const vname = vendor_name || records[0]?.vendor_name || '-';
    const vrate = deposit_rate || records[0]?.deposit_rate || 0;

    let bp_amount_rmb = 0, bp_amount_usd = 0, bp_exrate = '';
    if (rate_apply === '환율적용') {
      bp_amount_rmb = Number(amount);
    } else {
      bp_amount_usd = Number(amount);
      bp_exrate = 1;
    }

    try {
      // PO 마스터에도 추가
      await axios.post('/api/admin/import/balance/po/add', {
        vendor_id: vid,
        po_date: today,
        style_no: extra_no,
        po_no,
        pcs: 0,
        cost_rmb: 0,
        note: `[EXTRA] ${comment}`
      }, { withCredentials: true });

      // 화면에만 추가
      setRecords(rs => [
        ...rs,
        {
          id: po_no,
          vendor_id: vid,
          vendor_name: vname,
          deposit_rate: vrate,
          po_date: today,
          style_no: extra_no,
          po_no,
          pcs: 0,
          cost_rmb: 0,
          t_amount_rmb: 0,
          dp_amount_rmb: 0,
          bp_amount_rmb,
          bp_amount_usd,
          bp_exrate,
          comment,
          isExtra: true
        }
      ]);

      setExtraForm({ extra_no: '', po_no: '', rate_apply: '', comment: '', amount: '' });
      setAutoGeneratedPoNo('');
      alert('Extra Pay 추가 완료');
    } catch {
      alert('Extra Pay 추가 실패');
    }
  };

  // 삭제
  const handleRemoveRow = async row => {
    const isExtra = row.isExtra === true;
    setRecords(rs => rs.filter(r => r.id !== row.id));
    try {
      if (isExtra) {
        await axios.delete(`/api/admin/import/balance/po/delete/${row.po_no}`, { withCredentials: true });
      } else {
        await axios.delete(`/api/admin/import/balance/temp/delete/${row.id}`, { withCredentials: true });
      }
    } catch {
      alert('삭제 중 오류 발생');
    }
  };

  // 검색
  const handleSearch = () => {
    setFiltered(records.filter(r => {
      const mDate = dataSource === 'final'
        ? (!search.bp_date || cleanDate(r.bp_date) === search.bp_date)
        : true;
      const mStyle = !search.style || r.style_no?.toLowerCase().includes(search.style.toLowerCase());
      const mPo = !search.po_no || r.po_no?.toLowerCase().includes(search.po_no.toLowerCase());
      return mDate && mStyle && mPo;
    }));
  };

  // PDF 보기
  const handleFilteredPdf = async () => {
    try {
      const resp = await axios.post(
        '/api/admin/import/balance/pdf',
        {
          records: filtered.length ? filtered : records,
          date: bpDate,
          exrate: exRate
        },
        { responseType: 'blob' }
      );
      const url = window.URL.createObjectURL(new Blob([resp.data], { type: 'application/pdf' }));
      window.open(url);
    } catch {
      alert('PDF 생성 오류');
    }
  };

  // 환율 적용
  const applyExRate = async () => {
    if (!bpDate || !exRate) {
      return alert('Pay Date와 Exchange Rate를 입력하세요');
    }
    const updated = records.map(r => {
      if (r.isExtra && r.bp_exrate === 1 && r.bp_amount_rmb === 0) {
        return { ...r, bp_date: cleanDate(bpDate), bp_exrate: 1 };
      }
      const base = r.t_amount_rmb || (r.pcs * r.cost_rmb);
      const bpR = Number(((base * (100 - (r.deposit_rate || deposit_rate))) / 100).toFixed(2));
      return {
        ...r,
        bp_date: cleanDate(bpDate),
        bp_exrate: exRate,
        bp_amount_rmb: bpR,
        bp_amount_usd: exRate ? (bpR / parseFloat(exRate)).toFixed(2) : ''
      };
    });
    setRecords(updated);
    try {
      await axios.post('/api/admin/import/balance/temp/update', { rows: updated }, { withCredentials: true });
    } catch {
      alert('서버 저장 실패');
    }
  };

  // Pay(커밋)
  const handlePay = async () => {
    if (!bpDate || !exRate) {
      return alert('BP Date/Exchange Rate를 입력하세요');
    }
    const cleaned = records.map(r => ({
      ...r,
      po_date: cleanDate(r.po_date),
      bp_date: cleanDate(bpDate),
      bp_exrate: r.bp_exrate || exRate,
      bp_amount_rmb: r.bp_amount_rmb || 0,
      bp_amount_usd: r.bp_amount_usd || 0,
      vendor_id: r.vendor_id || vendor_id,
      vendor_name: r.vendor_name || vendor_name,
      deposit_rate: r.deposit_rate || deposit_rate,
      bp_status: 'paid'
    }));
    try {
      await axios.post('/api/admin/import/balance/batchAdd', { rows: cleaned, vendor_id, vendor_name, deposit_rate }, { withCredentials: true });
      await axios.post('/api/admin/import/balance/temp/commit', { bp_date: cleanDate(bpDate), bp_exrate: exRate }, { withCredentials: true });
      alert('정상 저장 완료');
      navigate('/admin/import/po');
    } catch {
      alert('저장 오류 발생');
    }
  };

  // 언마운트 시 temp clear
  useEffect(() => {
    return () => {
      axios.delete('/api/admin/import/balance/temp/clear').catch(() => {});
    };
  }, []);

  // filtered 초기화
  useEffect(() => {
    setFiltered(records);
  }, [records]);

  // 합계 계산
  useEffect(() => {
    let sumR = 0, sumU = 0;
    records.forEach(r => {
      const rmb = Number(r.bp_amount_rmb || 0);
      const usd = parseFloat(r.bp_amount_usd) || 0;
      if (!isNaN(rmb)) sumR += rmb;
      if (!isNaN(usd)) sumU += usd;
    });
    setTotalRmb(sumR);
    setTotalUsd(sumU);
  }, [records]);

  const handleCommentChange = (id, val) => {
    setComments(c => ({ ...c, [id]: val }));
  };

  return (
    <div className={styles.page}>
      <h2>Extra Pay Input</h2>
      <div className={`${styles.formRow} ${styles.small}`}>
        <select name="extra_no" value={extraForm.extra_no} onChange={handleExtraChange}>
          <option value="">선택: Extra no.</option>
          {extraList.map(x => <option key={x.id} value={x.extra_no}>{x.extra_no}</option>)}
        </select>
        <input name="po_no" placeholder="Extra PO no." value={autoGeneratedPoNo} readOnly />
        <select name="rate_apply" value={autoRateApply || extraForm.rate_apply} readOnly>
          <option value="">선택</option>
          <option value="환율적용">환율적용</option>
          <option value="환율비적용">환율비적용</option>
        </select>
        <input name="comment" placeholder="Comment" value={extraForm.comment} onChange={e => handleExtraChange(e)} />
        <input type="number" name="amount" placeholder="Extra Amount" value={extraForm.amount} onChange={e => handleExtraChange(e)} />
        <button type="button" onClick={handleAddExtra}>Extra Pay Add</button>
      </div>

      <h2>Balance Pay List</h2>
      <div className={styles.formRowGroup}>
        <div className={`${styles.formRow} ${styles.small}`}>
          <label style={{ fontWeight: 'bold', marginRight: 8 }}>조회 대상:</label>
          <select value={dataSource} onChange={e => setDataSource(e.target.value)}>
            <option value="temp">임시 데이터</option>
            <option value="final">확정 데이터</option>
          </select>

          {dataSource === 'final' && (
            <select
              value={search.bp_date}
              onChange={e => {
                const val = e.target.value;
                if (!val) {
                  setSearch({ bp_date: '', style: '', po_no: '' });
                  setFiltered(records);
                  return;
                }
                const upd = { ...search, bp_date: val };
                setSearch(upd);
                setFiltered(records.filter(r =>
                  cleanDate(r.bp_date) === val &&
                  (!upd.style || r.style_no?.toLowerCase().includes(upd.style.toLowerCase())) &&
                  (!upd.po_no || r.po_no?.toLowerCase().includes(upd.po_no.toLowerCase()))
                ));
              }}
            >
              <option value="">:: 전체 날짜 보기 ::</option>
              {availableDates.map(d => <option key={d} value={d}>{d}</option>)}
            </select>
          )}

          <input
            placeholder="Style"
            value={search.style}
            onChange={e => {
              setSearch(s => ({ ...s, style: e.target.value }));
              handleSearch();
            }}
          />
          <input
            placeholder="PO no."
            value={search.po_no}
            onChange={e => {
              setSearch(s => ({ ...s, po_no: e.target.value }));
              handleSearch();
            }}
          />
          <button type="button" onClick={handleSearch}>검색</button>
          <button type="button" onClick={handleFilteredPdf}>PDF 보기</button>
        </div>

        <div className={`${styles.formRow} ${styles.small}`} style={{ marginTop: 4 }}>
          <span style={{ fontWeight: 'bold' }}>Pay Date</span>
          <input type="date" value={bpDate} onChange={e => setBpDate(e.target.value)} style={{ minWidth: '8rem' }} />
          <span style={{ marginLeft: '1rem', fontWeight: 'bold' }}>Exchange Rate</span>
          <input type="number" step="0.0001" value={exRate} onChange={e => setExRate(e.target.value)} style={{ minWidth: '6rem' }} />
          <button type="button" onClick={applyExRate} disabled={dataSource === 'final'}>환율적용</button>
          <button type="button" onClick={handleFilteredPdf} disabled={dataSource === 'final'}>PDF 보기</button>
          <button type="button" onClick={handlePay} disabled={dataSource === 'final'}>Pay</button>
        </div>
      </div>

      <div className={styles.page} style={{ overflowX: 'auto' }}>
        <table className={styles.compactTable}>
          <thead>
            <tr>
              <th>선택제거</th>
              <th>Vendor Name</th>
              <th>Vendor Rate</th>
              <th>PO Date</th>
              <th>Style</th>
              <th>PO No.</th>
              <th>pcs</th>
              <th>cost(RMB)</th>
              <th>T.Amount(RMB)</th>
              <th>DP Amount(RMB)</th>
              <th>BP Amount(RMB)</th>
              <th>BP Date</th>
              <th>BP E.rate</th>
              <th>BP Amount(USD)</th>
              <th>Comment</th>
            </tr>
          </thead>
          <tbody>
            {(filtered.length ? filtered : records).map(r => (
              <tr key={r.id}>
                <td>
                  <button
                    type="button"
                    onClick={() => handleRemoveRow(r)}
                    disabled={dataSource === 'final'}
                  >선택제거</button>
                </td>
                <td>{r.vendor_name}</td>
                <td>{r.deposit_rate}</td>
                <td>{cleanDate(r.po_date)}</td>
                <td>{r.style_no}</td>
                <td>{r.po_no}</td>
                <td>{r.pcs != null ? Number(r.pcs).toLocaleString() : ''}</td>
                <td>{r.cost_rmb}</td>
                <td>{
                  r.pcs && r.cost_rmb
                    ? (Number(r.pcs) * Number(r.cost_rmb)).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })
                    : ''
                }</td>
                <td>{
                  r.dp_amount_rmb?.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) || ''
                }</td>
                <td>{
                  r.bp_amount_rmb != null
                    ? Number(r.bp_amount_rmb).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })
                    : ''
                }</td>
                <td>{cleanDate(r.bp_date)}</td>
                <td>{r.bp_exrate}</td>
                <td>{
                  r.bp_amount_usd
                    ? Number(r.bp_amount_usd).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })
                    : ''
                }</td>
                <td>
                  {comments[r.id] ?? r.comment ?? ''}
                </td>
              </tr>
            ))}
          </tbody>
          <tfoot>
            <tr>
              <td colSpan={10} style={{ textAlign: 'right', fontWeight: 'bold' }}>합계</td>
              <td style={{ fontWeight: 'bold', color: 'darkred' }}>
                {totalRmb.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
              </td>
              <td></td><td></td>
              <td style={{ fontWeight: 'bold', color: 'darkred' }}>
                {totalUsd.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
              </td>
              <td></td>
            </tr>
          </tfoot>
        </table>
      </div>
    </div>
  );
};

export default ImportBalancePage;
