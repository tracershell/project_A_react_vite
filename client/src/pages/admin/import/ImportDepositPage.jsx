// client/src/pages/admin/import/ImportDepositPage.jsx


import React, { useEffect, useState, useRef } from 'react';
import axios from 'axios';
import styles from './ImportDepositPage.module.css';
import { useLocation, useNavigate } from 'react-router-dom';

const ImportDepositPage = () => {
  const location = useLocation();
  const navigate = useNavigate();

  const [dataSource, setDataSource] = useState('temp');  // 'temp' or 'final'

  // ImportPoPage에서 넘어온 값
  const { rows = [], vendor_id, vendor_name, deposit_rate } = location.state || {};
  const [records, setRecords] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [dpDate, setDpDate] = useState('');
  const [exRate, setExRate] = useState('');
  const [search, setSearch] = useState({ dp_date: '', style: '', po_no: '' });

  // Extra Pay 입력폼
  const [extraList, setExtraList] = useState([]);
  const [extraForm, setExtraForm] = useState({
    extra_no: '', po_no: '', rate_apply: '', comment: '', amount: ''
  });
  const [autoGeneratedPoNo, setAutoGeneratedPoNo] = useState('');
  const [autoRateApply, setAutoRateApply] = useState('');
  const inputsRef = useRef([]);
  const [comments, setComments] = useState({});
  const [totalRmb, setTotalRmb] = useState(0);
  const [totalUsd, setTotalUsd] = useState(0);

  // 1) 최초 마운트시: rows(PO선택) 있으면 임시테이블에 저장, 아니면 임시테이블만 fetch
  useEffect(() => {
    if (rows.length > 0) {
      setRecords(rows); // 🔴 서버 저장 X, 상태로만 보관
    } else {
      fetchDepositTemp();   // 이전 임시저장 기록은 DB에서 불러오기
    }
    fetchExtraList();
  }, []);
  
  // 1) 임시 테이블에서 리스트 fetch : 임시 or 확정 저장 데이타 검색 관련
  useEffect(() => {
  fetchRecords();
}, [dataSource]);

  // 2) 임시 테이블에서 리스트 fetch
  const fetchDepositTemp = async () => {
    const { data } = await axios.get('/api/admin/import/deposit/temp');
    setRecords(data);
  };

  // 3) Extra 목록 불러오기
  const fetchExtraList = async () => {
    const { data } = await axios.get('/api/admin/import/extra');
    setExtraList(data);
  };


  const fetchRecords = async () => {
  const endpoint =
    dataSource === 'temp'
      ? '/api/admin/import/deposit/temp'
      : '/api/admin/import/deposit/final';
  try {
    const { data } = await axios.get(endpoint, { withCredentials: true });
    setRecords(data);
  } catch (err) {
    console.error('❌ fetchRecords 오류:', err);
    alert('데이터를 불러오는 데 실패했습니다.');
  }
};


  // 4) Extra 선택 시 자동 값 세팅
  useEffect(() => {
    if (!extraForm.extra_no) {
      setAutoRateApply('');
      setExtraForm(f => ({ ...f, po_no: '', rate_apply: '', comment: '', amount: '' }));
      setAutoGeneratedPoNo('');
      return;
    }
    const item = extraList.find(x => x.extra_no === extraForm.extra_no);
    if (item) {
      setAutoRateApply(item.rate_apply || '');
      // 날짜코드로 고유 PO no 생성
      const now = new Date();
      const dateCode = [
        now.getFullYear(), ('0' + (now.getMonth() + 1)).slice(-2),
        ('0' + now.getDate()).slice(-2), ('0' + now.getHours()).slice(-2),
        ('0' + now.getMinutes()).slice(-2), ('0' + now.getSeconds()).slice(-2)
      ].join('');
      const po_no_unique = `${item.po_no || 'EXTRA'}_${dateCode}`;
      setAutoGeneratedPoNo(po_no_unique);
      setExtraForm(f => ({
        ...f, po_no: po_no_unique, rate_apply: item.rate_apply || ''
      }));
    }
  }, [extraForm.extra_no, extraList]);

  const handleExtraChange = e => setExtraForm(f => ({ ...f, [e.target.name]: e.target.value }));

  // 5) Extra Pay Add (임시테이블에 저장)
  const handleAddExtra = async () => {
    if (!extraForm.extra_no || !extraForm.po_no || !extraForm.rate_apply || !extraForm.amount) {
      alert('모든 Extra Pay 항목을 입력하세요');
      return;
    }

    // 환율적용/비적용 분기
    let dp_amount_rmb = '', dp_amount_usd = '', dp_exrate = '';
    let showStyle = extraForm.extra_no;
    if (extraForm.rate_apply === '환율적용') {
      dp_amount_rmb = Number(extraForm.amount);
      dp_amount_usd = '';
      dp_exrate = '';
    } else {
      dp_amount_rmb = 0;
      dp_amount_usd = Number(extraForm.amount);
      dp_exrate = 1;
    }
    // 오늘 날짜(YYYY-MM-DD)를 po_date로 사용
    const today = new Date();
    const poDate = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;
    const useVendorId = vendor_id || (records[0] && records[0].vendor_id) || '';
    const vendorName = vendor_name || (records[0] && records[0].vendor_name) || '-';
    const vendorRate = deposit_rate || (records[0] && records[0].deposit_rate) || '-';

    try {
      // 1. PO 테이블에 Extra 항목으로도 등록 (일반 PO와 통일) : PO table 에 자동등록되는 Extra Pay 자동등록 제거거
      // await axios.post('/api/admin/import/po/add', {
      //   vendor_id: useVendorId,
      //   po_no: extraForm.po_no,
      //   style_no: showStyle,
      //   pcs: 0,
      //   cost_rmb: 0,
      //   po_date: poDate,
      //   note: `[EXTRA] ${extraForm.comment}`,
      // });

      // 2. Deposit Pay Listrecords에만 추가, 임시DB 저장 없음 🔴
      setRecords(recs => [
        ...recs,
        {
          id: extraForm.po_no,
          vendor_name: vendorName,
          deposit_rate: vendorRate,
          po_no: extraForm.po_no,
          po_date: poDate,
          style_no: showStyle,
          pcs: 0,
          cost_rmb: 0,
          t_amount_rmb: 0,
          dp_amount_rmb,
          dp_amount_usd,
          dp_exrate,
          comment: extraForm.comment,
          isExtra: true
        }
      ]);
      setExtraForm({ extra_no: '', po_no: '', rate_apply: '', comment: '', amount: '' });
      setAutoGeneratedPoNo('');
      alert('Extra Pay 추가 완료');
    } catch (err) {
      alert('Extra Pay 입력 오류');
    }
  };

  // 임시테이블 row 삭제
  const handleRemoveRow = async (row) => {
    // 🔴 상태에서 직접 삭제 (Pay 전에는 DB가 아니라 상태에서만 관리되므로)
    setRecords(recs => recs.filter(r => r.id !== row.id));
    // 만약 DB에서만 삭제할 상황이면 아래만 사용
    //  try {
    //    await axios.delete(`/api/admin/import/deposit/temp/delete/${row.id}`);
    //    fetchDepositTemp();
    //  } catch {
    //    alert('삭제 오류');
    //  }
  };

  // 검색
const handleSearch = () => {
  setFiltered(
    records.filter(r =>
      (!search.dp_date || (r.dp_date && cleanDate(r.dp_date) === search.dp_date)) &&
      (!search.style || r.style_no?.toLowerCase().includes(search.style.toLowerCase())) &&
      (!search.po_no || r.po_no?.toLowerCase().includes(search.po_no.toLowerCase()))
    )
  );
};

const handleFilteredPdf = async () => {
  try {
    const response = await axios.post(
      '/api/admin/import/deposit/pdf',
      {
        records: filtered.length ? filtered : records,
        date: dpDate,
        exrate: exRate,
      },
      { responseType: 'blob' }
    );
    const pdfUrl = window.URL.createObjectURL(new Blob([response.data], { type: 'application/pdf' }));
    window.open(pdfUrl);
  } catch (err) {
    alert('PDF 생성 오류');
  }
};

  useEffect(() => { setFiltered(records); }, [records]);

  // PayDate, 환율 적용 (DP Amount(RMB)값이 0이 아니면 모두 자동 계산)
  const applyExRate = () => {
    if (!dpDate || !exRate) {
      alert('Pay Date와 Exchange Rate를 입력하세요');
      return;
    }
    setRecords(recs =>
      recs.map(r => {
        // ExtraPay(환율비적용) 유지
        if ((r.dp_exrate === 1 || r.dp_exrate === "1") && Number(r.dp_amount_rmb) === 0) {
          return { ...r, dp_date: dpDate, dp_exrate: 1, dp_amount_usd: r.dp_amount_usd || '' };
        }

        // 일반 PO (0 이상만 계산)
        let dpRmb = Number(r.dp_amount_rmb);
        if (!dpRmb) {
          // 만약 0이거나 값이 없으면 계산해서 넣어줌
          if (r.t_amount_rmb && r.deposit_rate) {
            dpRmb = Number(r.t_amount_rmb) * Number(r.deposit_rate) / 100;
          } else {
            dpRmb = 0;
          }
        }
        return {
          ...r,
          dp_date: dpDate,
          dp_exrate: exRate,
          dp_amount_rmb: dpRmb,
          dp_amount_usd: (dpRmb && exRate) ? (dpRmb / parseFloat(exRate)).toFixed(2) : '',
        };
      })
    );
  };




  // 합계 (0이 아닌 것만 합계에 포함)
  useEffect(() => {
    if (rows.length > 0) {
      const updatedRows = rows.map(r => {
        const t_amount = r.t_amount_rmb || (Number(r.pcs || 0) * Number(r.cost_rmb || 0));
        const rate = Number(r.deposit_rate || deposit_rate || 0);
        let dpAmount = r.dp_amount_rmb;
        if (dpAmount === undefined || dpAmount === null || dpAmount === '') {
          dpAmount = (t_amount * rate / 100).toFixed(2);
        }
        return {
          ...r,
          t_amount_rmb: t_amount,
          dp_amount_rmb: dpAmount
        };
      });
      setRecords(updatedRows);
    } else {
      fetchDepositTemp();
    }
    fetchExtraList();
  }, []);

  // table 합계 계산

  useEffect(() => {
    let totalRmb = 0, totalUsd = 0;
    for (const r of records) {
      // 테이블과 동일 공식으로 즉석 계산
      const t_amount_rmb = r.t_amount_rmb || (Number(r.pcs || 0) * Number(r.cost_rmb || 0));
      const rate =
        r.deposit_rate !== undefined && r.deposit_rate !== null && r.deposit_rate !== ''
          ? Number(r.deposit_rate)
          : Number(deposit_rate) || 0;
      const dp_amount_rmb = (t_amount_rmb * rate / 100);
      if (!isNaN(dp_amount_rmb)) totalRmb += dp_amount_rmb;

      if (!isNaN(parseFloat(r.dp_amount_usd))) totalUsd += parseFloat(r.dp_amount_usd) || 0;
    }
    setTotalRmb(totalRmb);
    setTotalUsd(totalUsd);
  }, [records]);

  // 페이지 언마운트 시 임시 테이블 삭제
  useEffect(() => {
    return () => {
      axios.delete('/api/admin/import/deposit/temp/clear').catch(() => { });
    };
  }, []);

  const formatDate = (value) => {
  if (!value) return '';
  const date = new Date(value);
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
};


  // 날짜 포맷 정리 : 형식 변환 함수 MYWQL DATE YYYY-MM-DD
  const cleanDate = (dateStr) => {
    if (!dateStr) return null;
    if (typeof dateStr === 'string') return dateStr.split('T')[0]; // '2025-05-15'
    if (dateStr instanceof Date) return dateStr.toISOString().split('T')[0];
    return String(dateStr).split('T')[0];
  };

  // Pay: 임시테이블 → 실테이블 커밋
  const handlePay = async () => {
    if (!dpDate || !exRate) return alert('DP Date/Exchange Rate를 입력하세요');
    try {
      // 🔸 날짜 포맷 정리
      const cleanedRecords = records.map(r => ({
        ...r,
        po_date: cleanDate(r.po_date),
        dp_date: cleanDate(dpDate),
      }));

      console.log('📦 [DEBUG] cleanedRecords:', cleanedRecords);

      // 1. 임시 저장
      await axios.post(
        '/api/admin/import/deposit/batchAdd',
        { rows: cleanedRecords, vendor_id, vendor_name, deposit_rate },
        { withCredentials: true }
      );

      // 2. 커밋
      await axios.post(
        '/api/admin/import/deposit/temp/commit',   // ← 로직은 동일, 백엔드가 import_temp 읽도록 수정
        { dp_date: cleanDate(dpDate), dp_exrate: exRate },
        { withCredentials: true }
      );

      alert('정상적으로 저장(커밋) 완료!');
      navigate('/admin/import/po');
    } catch (err) {
      console.error('❌ 저장 중 오류:', err);
      alert('저장 중 오류: ' + (err.response?.data?.error || err.message));
    }
  };

  const handleViewPdf = async () => {
    // 현재 Deposit Pay List(ExtraPay/임시포함) 전체를 PDF로 출력
    try {
      const response = await axios.post(
        '/api/admin/import/deposit/pdf',
        {
          records,  // 현재 화면의 모든 rows
          date: dpDate,
          exrate: exRate,
        },
        { responseType: 'blob' } // PDF 파일 다운로드용
      );
      // Blob URL로 새 창에 띄움
      const pdfUrl = window.URL.createObjectURL(new Blob([response.data], { type: 'application/pdf' }));
      window.open(pdfUrl);
    } catch (err) {
      alert('PDF 생성 오류');
    }
  };

  const handleCommentChange = (id, val) => {
    setComments(c => ({ ...c, [id]: val }));
  };
  // ── DP Amount 합계 계산 login
  const dataRows = filtered.length ? filtered : records;
  const sumDpRmb = dataRows.reduce((sum, r) => {
    const dp = (r.dp_amount_rmb !== undefined && r.dp_amount_rmb !== null && r.dp_amount_rmb !== '')
      ? Number(r.dp_amount_rmb)
      : (Number(r.pcs || 0) * Number(r.cost_rmb || 0) * (Number(r.deposit_rate || deposit_rate) / 100));
    return sum + (isNaN(dp) ? 0 : dp);
  }, 0);
  const sumDpUsd = dataRows.reduce((sum, r) => {
    const u = parseFloat(r.dp_amount_usd);
    return sum + (isNaN(u) ? 0 : u);
  }, 0);


  // --- TABLE HEADER & BODY 구성: 첨부 이미지와 요구에 맞게 ---
  return (
    <div className={styles.page}>
      <h2>Extra Pay Input</h2>
      <div className={`${styles.formRow} ${styles.small}`}>
        <select name="extra_no" value={extraForm.extra_no} onChange={handleExtraChange}>
          <option value="">선택: Extra no.</option>
          {extraList.map(x => (
            <option key={x.id} value={x.extra_no}>{x.extra_no}</option>
          ))}
        </select>
        <input name="po_no" placeholder="Extra PO no." value={autoGeneratedPoNo} readOnly />
        <select name="rate_apply" value={autoRateApply || extraForm.rate_apply} onChange={handleExtraChange} readOnly>
          <option value="">선택</option>
          <option value="환율적용">환율적용</option>
          <option value="환율비적용">환율비적용</option>
        </select>
        <input name="comment" placeholder="Comment" value={extraForm.comment} onChange={handleExtraChange} />
        <input type="number" name="amount" placeholder="Extra Amount" value={extraForm.amount} onChange={handleExtraChange} />
        <button type="button" onClick={handleAddExtra}>Extra Pay Add</button>
      </div>

      <h2>Deposit Pay List</h2>
      <div className={styles.formRowGroup}>
        {/* ✅ [추가 위치] 조회 대상 선택 콤보박스 */}
  <div className={`${styles.formRow} ${styles.small}`}>
    <label style={{ fontWeight: 'bold', marginRight: '8px' }}>조회 대상:</label>
    <select value={dataSource} onChange={e => setDataSource(e.target.value)}>
      <option value="temp">임시 데이터</option>
      <option value="final">확정 데이터</option>
    </select>
  </div>
        {/* 1) 검색 영역 */}
        <div className={`${styles.formRow} ${styles.small}`}>
          <input
            type="date"
            placeholder="DP Date"
            value={search.dp_date}
            onChange={e => setSearch(s => ({ ...s, dp_date: e.target.value }))}
          />
          <input
            placeholder="Style"
            value={search.style}
            onChange={e => setSearch(s => ({ ...s, style: e.target.value }))}
          />
          <input
            placeholder="PO no."
            value={search.po_no}
            onChange={e => setSearch(s => ({ ...s, po_no: e.target.value }))}
          />
          <button type="button" onClick={handleSearch}>검색</button>
          <button type="button" onClick={handleFilteredPdf}>PDF 보기</button>
        </div>

        {/* 2) Pay Date / Exchange Rate / 버튼 영역 */}
        <div className={`${styles.formRow} ${styles.small}`} style={{ marginTop: '4px' }}>
          <span style={{ fontWeight: 'bold' }}>Pay Date</span>
          <input
            type="date"
            value={dpDate}
            onChange={e => setDpDate(e.target.value)}
            style={{ minWidth: '8rem' }}
          />
          <span style={{ marginLeft: '1rem', fontWeight: 'bold' }}>Exchange Rate</span>
          <input
            type="number"
            step="0.0001"
            value={exRate}
            onChange={e => setExRate(e.target.value)}
            style={{ minWidth: '6rem' }}
          />
          <button type="button" onClick={applyExRate}>환율적용</button>
          <button type="button" onClick={handleViewPdf}>PDF 보기</button>
          <button type="button" onClick={handlePay}>Pay</button>
        </div>
      </div>


      {/* Deposit Pay Table */}
      <div className={styles.page} style={{ overflowX: 'auto' }}>
        <table className="styles.compactTable">
          <thead>
            <tr>
              <th>선택제거</th>
              <th>Vendor Name</th>
              <th>Vendor Rate</th>
              <th>PO Date</th>
              <th>Style</th>
              <th>PO No.</th>
              <th>pcs</th>
              <th>cost(RMB)</th>
              <th>T.Amount(RMB)</th>
              <th>DP Amount(RMB)</th>
              <th>DP Date</th>
              <th>DP E.rate</th>
              <th>DP Amount(USD)</th>
              <th>Comment</th>
            </tr>
          </thead>
          <tbody>
            {(filtered.length ? filtered : records).map(r => (
              <tr key={r.id}>
                <td>
                  <button
    type="button"
    onClick={() => handleRemoveRow(r)}
    disabled={dataSource === 'final'}  // 확정 데이터면 비활성화
  >
    선택제거
  </button>
                </td>
                <td>{r.vendor_name}</td>
                <td>{r.deposit_rate || ''}</td>
                <td>{r.po_date ? String(r.po_date).split('T')[0] : ''}</td>
                <td>{r.style_no}</td>
                <td>{r.po_no}</td>
                <td>{r.pcs != null ? Number(r.pcs).toLocaleString() : ''}</td>
                <td>{r.cost_rmb}</td>
                <td>{
                  r.pcs && r.cost_rmb
                    ? (Number(r.pcs) * Number(r.cost_rmb))
                      .toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })
                    : ''
                }</td>
                <td>
                  {(() => {
                    const t_amount_rmb = r.t_amount_rmb || (Number(r.pcs || 0) * Number(r.cost_rmb || 0));
                    const rmbVal = (r.dp_amount_rmb !== undefined && r.dp_amount_rmb !== null && r.dp_amount_rmb !== '' && Number(r.dp_amount_rmb) !== 0)
                      ? Number(r.dp_amount_rmb)
                      : (t_amount_rmb * (Number(r.deposit_rate) / 100));
                    return rmbVal.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                  })()}
                </td>

                <td>{formatDate(r.dp_date)}</td>
                <td>{r.dp_exrate || ''}</td>
                <td>{
                  r.dp_amount_usd
                    ? Number(r.dp_amount_usd)
                      .toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })
                    : ''
                }</td>
                <td>
                  {comments[r.id] ?? r.comment ?? ''}
                </td>
              </tr>
            ))}
          </tbody>
          <tfoot>
            <tr>
              {/* DP Amount(RMB) 와 DP Amount(USD) 만 합계 */}
              <td colSpan={9} style={{ textAlign: 'right', fontWeight: 'bold' }}>합계</td>
              <td style={{ fontWeight: 'bold', color: 'darkred' }}>
                {sumDpRmb.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
              </td>
              {/* DP Date, DP E.rate 빈 칸 */}
              <td></td>
              <td></td>
              <td style={{ fontWeight: 'bold', color: 'darkred' }}>
                {sumDpUsd.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
              </td>
              <td></td>
            </tr>
          </tfoot>
        </table>
      </div>
    </div >
  );
};

export default ImportDepositPage;
