import React, { useEffect, useState, useRef } from 'react';
import axios from 'axios';
import styles from './ImportDepositPage.module.css';
import { useLocation, useNavigate } from 'react-router-dom';

const ImportDepositPage = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { rows = [], vendor_id } = location.state || {};
  const [records, setRecords] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [dpDate, setDpDate] = useState('');
  const [exRate, setExRate] = useState('');
  const [search, setSearch] = useState({ dp_date: '', style: '', po_no: '' });

  // Extra Pay 입력폼 상태
  const [extraList, setExtraList] = useState([]);
  const [extraForm, setExtraForm] = useState({
    extra_no: '',
    po_no: '',
    rate_apply: '',
    comment: '',
    amount: ''
  });
  const [autoGeneratedPoNo, setAutoGeneratedPoNo] = useState('');
  const [autoRateApply, setAutoRateApply] = useState('');
  const [prefix, setPrefix] = useState('');
  const [vendorName, setVendorName] = useState('');   // 추가
  const [vendorRate, setVendorRate] = useState('');   // 추가
  const inputsRef = useRef([]);
  const [comments, setComments] = useState({});

  // 1) Deposit Pay List 초기화
  useEffect(() => {
    if (rows?.length) {
      setVendorName(rows[0]?.vendor_name || '-'); // 최초 벤더 정보 저장
      setVendorRate(rows[0]?.deposit_rate || '-');
      setRecords(rows.map(r => {
        const t_amount_rmb = r.pcs && r.cost_rmb ? (r.pcs * r.cost_rmb) : 0;
        const db_amount_rmb = t_amount_rmb * (Number(r.deposit_rate) / 100);
        return {
          ...r,
          t_amount_rmb,
          dp_amount_rmb: db_amount_rmb,
          dp_amount_usd: '',
          dp_exrate: '',
          comment: '',
        };
      }));
    }
  }, [rows]);

  // 2) Extra 목록 불러오기
  useEffect(() => {
    fetchExtraList();
  }, []);
  const fetchExtraList = async () => {
    const { data } = await axios.get('/api/admin/import/extra');
    setExtraList(data);
  };

  // 3) Extra no 선택 시 prefix/환율적용값 자동 세팅, PO no 자동 생성
  useEffect(() => {
    if (!extraForm.extra_no) {
      setPrefix('');
      setAutoRateApply('');
      setExtraForm(f => ({ ...f, po_no: '', rate_apply: '', comment: '', amount: '' }));
      setAutoGeneratedPoNo('');
      return;
    }
    const item = extraList.find(x => x.extra_no === extraForm.extra_no);
    if (item) {
      setPrefix(item.po_no || '');
      setAutoRateApply(item.rate_apply || '');
      // 날짜코드(YYYYMMDDHHmmss)로 고유 PO no 생성
      const now = new Date();
      const dateCode = [
        now.getFullYear(),
        ('0' + (now.getMonth() + 1)).slice(-2),
        ('0' + now.getDate()).slice(-2),
        ('0' + now.getHours()).slice(-2),
        ('0' + now.getMinutes()).slice(-2),
        ('0' + now.getSeconds()).slice(-2)
      ].join('');
      const po_no_unique = `${item.po_no || 'EXTRA'}_${dateCode}`;
      setAutoGeneratedPoNo(po_no_unique);
      setExtraForm(f => ({
        ...f,
        po_no: po_no_unique,
        rate_apply: item.rate_apply || ''
      }));
    }
  }, [extraForm.extra_no, extraList]);

  // 4) Extra Pay 입력값 핸들러
  const handleExtraChange = e => {
    setExtraForm(f => ({ ...f, [e.target.name]: e.target.value }));
  };

  // 5) Extra Pay Add (입력)
  const handleAddExtra = async () => {
    if (!extraForm.extra_no || !extraForm.po_no || !extraForm.rate_apply || !extraForm.amount) {
      alert('모든 Extra Pay 항목을 입력하세요');
      return;
    }
    // 환율적용/비적용 분기
    let dp_amount_rmb = '', dp_amount_usd = '', dp_exrate = '';
    let showStyle = `선택: ${extraForm.extra_no}`;
    if (extraForm.rate_apply === '환율적용') {
      dp_amount_rmb = Number(extraForm.amount);
      dp_amount_usd = '';
      dp_exrate = '';
    } else {
      dp_amount_rmb = 0;
      dp_amount_usd = Number(extraForm.amount);
      dp_exrate = 1;
    }
    // 오늘 날짜(YYYY-MM-DD)를 po_date로 사용
    const today = new Date();
    const poDate = `${today.getFullYear()}-${String(today.getMonth()+1).padStart(2,'0')}-${String(today.getDate()).padStart(2,'0')}`;
    const useVendorId = vendor_id || (records[0] && records[0].vendor_id) || '';

    try {
      await axios.post('/api/admin/import/po/add', {
        vendor_id: useVendorId,
        po_no: extraForm.po_no,
        style_no: showStyle,
        pcs: 0,
        cost_rmb: 0,
        po_date: poDate,
        note: `[EXTRA] ${extraForm.comment}`,
      });

      setRecords(recs => [
        ...recs,
        {
          id: extraForm.po_no,
          vendor_name: vendorName || '-',   // 벤더 이름 반영
          deposit_rate: vendorRate || '-',
          po_no: extraForm.po_no,
          po_date: poDate,
          style_no: showStyle,              // Style에 Extra no 표시
          pcs: 0,
          cost_rmb: 0,
          t_amount_rmb: 0,
          dp_amount_rmb,
          dp_amount_usd,
          dp_exrate,
          comment: extraForm.comment,
          isExtra: true
        }
      ]);
      setExtraForm({ extra_no: '', po_no: '', rate_apply: '', comment: '', amount: '' });
      setAutoGeneratedPoNo('');
      alert('Extra Pay 추가 완료');
    } catch (err) {
      alert('Extra Pay 입력 오류');
    }
  };

  // 선택제거 (Extra는 DB에서 삭제)
  const handleRemoveRow = async (row) => {
    if (row.isExtra) {
      try {
        await axios.delete(`/api/admin/import/po/delete/${row.id}`);
        setRecords(recs => recs.filter(r => r.id !== row.id));
      } catch {
        alert('삭제 오류');
      }
    } else {
      setRecords(recs => recs.filter(r => r.id !== row.id));
    }
  };

  // 검색 핸들러
  const handleSearch = () => {
    setFiltered(
      records.filter(r =>
        (!search.dp_date || (r.dp_date && r.dp_date === search.dp_date)) &&
        (!search.style || r.style_no?.toLowerCase().includes(search.style.toLowerCase())) &&
        (!search.po_no || r.po_no?.toLowerCase().includes(search.po_no.toLowerCase()))
      )
    );
  };
  useEffect(() => {
    setFiltered(records);
  }, [records]);

  // PDF 보기
  const handleViewPdf = () => {
    window.open(`/api/admin/import/deposit/pdf?date=${dpDate}&exrate=${exRate}`, '_blank');
  };

  // 환율 적용
  const applyExRate = () => {
    setRecords(recs =>
      recs.map(r => {
        if (r.dp_amount_rmb && exRate && !r.isExtra) {
          return {
            ...r,
            dp_amount_usd: (parseFloat(r.dp_amount_rmb) / parseFloat(exRate)).toFixed(2),
            dp_exrate: exRate,
          };
        } else if (r.isExtra && r.dp_exrate === 1) {
          return r;
        }
        return r;
      })
    );
  };

  // Pay 버튼 처리
  const handlePay = async () => {
    if (!dpDate || !exRate) return alert('DP Date/Exchange Rate를 입력하세요');
    try {
      for (const rec of records) {
        await axios.post('/api/admin/import/deposit/add', {
          po_id: rec.id,
          vendor_id,
          dp_date: dpDate,
          dp_exrate: exRate,
          dp_amount_rmb: rec.dp_amount_rmb,
          dp_amount_usd: rec.dp_amount_usd,
          comment: comments[rec.id] || rec.comment || ''
        });
      }
      alert('저장 완료!');
      navigate('/admin/import/po');
    } catch (err) {
      alert('저장 중 오류');
    }
  };

  // 개별 comment 핸들러
  const handleCommentChange = (id, val) => {
    setComments(c => ({ ...c, [id]: val }));
  };

  return (
    <div className={styles.page}>
      <h2>Extra Pay Input</h2>
      <div className={styles.formRow}>
        <select
          ref={el => (inputsRef.current[0] = el)}
          name="extra_no"
          value={extraForm.extra_no}
          onChange={handleExtraChange}
        >
          <option value="">선택: Extra no.</option>
          {extraList.map(x => (
            <option key={x.id} value={x.extra_no}>
              {x.extra_no}
            </option>
          ))}
        </select>
        <input
          ref={el => (inputsRef.current[1] = el)}
          name="po_no"
          placeholder="Extra PO no."
          value={autoGeneratedPoNo}
          onChange={() => {}}
          readOnly
        />
        <select
          ref={el => (inputsRef.current[2] = el)}
          name="rate_apply"
          value={autoRateApply || extraForm.rate_apply}
          onChange={handleExtraChange}
          style={{
            color:
              (autoRateApply || extraForm.rate_apply) === '환율적용'
                ? 'blue'
                : (autoRateApply || extraForm.rate_apply) === '환율비적용'
                  ? 'red'
                  : '#000'
          }}
          readOnly
        >
          <option value="">선택</option>
          <option value="환율적용">환율적용</option>
          <option value="환율비적용">환율비적용</option>
        </select>
        <input
          ref={el => (inputsRef.current[3] = el)}
          name="comment"
          placeholder="Comment"
          value={extraForm.comment}
          onChange={handleExtraChange}
        />
        <input
          ref={el => (inputsRef.current[4] = el)}
          type="number"
          name="amount"
          placeholder="Extra Amount"
          value={extraForm.amount}
          onChange={handleExtraChange}
        />
        <button type="button" onClick={handleAddExtra}>Extra Pay Add</button>
      </div>

      <h2>Deposit Pay List</h2>
      <div className={styles.formRow}>
        {/* ... 기존 검색, 환율, Pay 버튼 등 ... */}
      </div>

      <div className={styles.list}>
        <table className="compactTable">
          <thead>
            <tr>
              <th>선택제거</th>
              <th>Vendor Name</th>
              <th>Vendor Rate</th>
              <th>PO Date</th>
              <th>Style</th>
              <th>PO No.</th>
              <th>pcs</th>
              <th>cost(RMB)</th>
              <th>T.Amount(RMB)</th>
              <th>DB Amount(RMB)</th>
              <th>DP Date</th>
              <th>DP E.rate</th>
              <th>DP Amount(USD)</th>
              <th>Comment</th>
            </tr>
          </thead>
          <tbody>
            {(filtered.length ? filtered : records).map(r => {
              // 일반 PO
              if (!r.isExtra) {
                const t_amount = r.pcs && r.cost_rmb ? (r.pcs * r.cost_rmb) : 0;
                const db_amount = t_amount * (Number(r.deposit_rate) / 100);
                return (
                  <tr key={r.id}>
                    <td><button type="button" onClick={() => handleRemoveRow(r)}>선택제거</button></td>
                    <td>{r.vendor_name}</td>
                    <td>{r.deposit_rate}</td>
                    <td>{r.po_date ? r.po_date?.split('T')[0] : ''}</td>
                    <td>{r.style_no}</td>
                    <td>{r.po_no}</td>
                    <td>{r.pcs}</td>
                    <td>{r.cost_rmb}</td>
                    <td>{t_amount}</td>
                    <td>{db_amount}</td>
                    <td>{dpDate}</td>
                    <td>{r.dp_exrate}</td>
                    <td>{r.dp_amount_usd}</td>
                    <td>
                      <input
                        value={comments[r.id] ?? r.comment ?? ''}
                        onChange={e => handleCommentChange(r.id, e.target.value)}
                        placeholder="Comment"
                      />
                    </td>
                  </tr>
                );
              }
              // Extra Pay
              return (
                <tr key={r.id}>
                  <td><button type="button" onClick={() => handleRemoveRow(r)}>선택제거</button></td>
                  <td>{vendorName || '-'}</td>
                  <td>{vendorRate || '-'}</td>
                  <td>{r.po_date}</td>
                  <td>{r.style_no}</td>
                  <td>{r.po_no}</td>
                  <td>0</td>
                  <td>0</td>
                  <td>0</td>
                  <td>{r.dp_amount_rmb}</td>
                  <td>{dpDate}</td>
                  <td>{r.dp_exrate}</td>
                  <td>{r.dp_amount_usd}</td>
                  <td>
                    <input
                      value={comments[r.id] ?? r.comment ?? ''}
                      onChange={e => handleCommentChange(r.id, e.target.value)}
                      placeholder="Comment"
                    />
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default ImportDepositPage;
