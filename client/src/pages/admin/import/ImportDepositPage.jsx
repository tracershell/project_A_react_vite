// ImportDepositPage.jsx
import React, { useEffect, useState, useRef } from 'react';
import axios from 'axios';
import styles from './ImportDepositPage.module.css';
import { useLocation, useNavigate } from 'react-router-dom';

const ImportDepositPage = () => {
  const location = useLocation();
  const navigate = useNavigate();

  // ImportPoPage에서 넘어온 값
  const { rows = [], vendor_id, vendor_name, deposit_rate } = location.state || {};
  const [records, setRecords] = useState([]);
  const [filtered, setFiltered] = useState([]);
  const [dpDate, setDpDate] = useState('');
  const [exRate, setExRate] = useState('');
  const [search, setSearch] = useState({ dp_date: '', style: '', po_no: '' });

  // Extra Pay 입력폼
  const [extraList, setExtraList] = useState([]);
  const [extraForm, setExtraForm] = useState({
    extra_no: '', po_no: '', rate_apply: '', comment: '', amount: ''
  });
  const [autoGeneratedPoNo, setAutoGeneratedPoNo] = useState('');
  const [autoRateApply, setAutoRateApply] = useState('');
  const inputsRef = useRef([]);
  const [comments, setComments] = useState({});
  const [totalRmb, setTotalRmb] = useState(0);
  const [totalUsd, setTotalUsd] = useState(0);

  // 1) 최초 마운트시: rows(PO선택) 있으면 임시테이블에 저장, 아니면 임시테이블만 fetch
  useEffect(() => {
    if (rows.length > 0) {
      axios.post('/api/admin/import/deposit/temp/batchAdd', {
        rows, vendor_id, vendor_name, deposit_rate
      }).then(() => {
        fetchDepositTemp();
      });
    } else {
      fetchDepositTemp();
    }
    fetchExtraList();
    // eslint-disable-next-line
  }, []);

  // 2) 임시 테이블에서 리스트 fetch
  const fetchDepositTemp = async () => {
    const { data } = await axios.get('/api/admin/import/deposit/temp');
    setRecords(data);
  };

  // 3) Extra 목록 불러오기
  const fetchExtraList = async () => {
    const { data } = await axios.get('/api/admin/import/extra');
    setExtraList(data);
  };

  // 4) Extra 선택 시 자동 값 세팅
  useEffect(() => {
    if (!extraForm.extra_no) {
      setAutoRateApply('');
      setExtraForm(f => ({ ...f, po_no: '', rate_apply: '', comment: '', amount: '' }));
      setAutoGeneratedPoNo('');
      return;
    }
    const item = extraList.find(x => x.extra_no === extraForm.extra_no);
    if (item) {
      setAutoRateApply(item.rate_apply || '');
      // 날짜코드로 고유 PO no 생성
      const now = new Date();
      const dateCode = [
        now.getFullYear(), ('0' + (now.getMonth() + 1)).slice(-2),
        ('0' + now.getDate()).slice(-2), ('0' + now.getHours()).slice(-2),
        ('0' + now.getMinutes()).slice(-2), ('0' + now.getSeconds()).slice(-2)
      ].join('');
      const po_no_unique = `${item.po_no || 'EXTRA'}_${dateCode}`;
      setAutoGeneratedPoNo(po_no_unique);
      setExtraForm(f => ({
        ...f, po_no: po_no_unique, rate_apply: item.rate_apply || ''
      }));
    }
  }, [extraForm.extra_no, extraList]);

  const handleExtraChange = e => setExtraForm(f => ({ ...f, [e.target.name]: e.target.value }));

  // 5) Extra Pay Add (임시테이블에 저장)
  const handleAddExtra = async () => {
    if (!extraForm.extra_no || !extraForm.po_no || !extraForm.rate_apply || !extraForm.amount) {
      alert('모든 Extra Pay 항목을 입력하세요'); return;
    }
    const showStyle = extraForm.extra_no;
    let dp_amount_rmb = '', dp_amount_usd = '', dp_exrate = '';
    if (extraForm.rate_apply === '환율적용') {
      dp_amount_rmb = Number(extraForm.amount);
      dp_amount_usd = '';
      dp_exrate = '';
    } else {
      dp_amount_rmb = 0;
      dp_amount_usd = Number(extraForm.amount);
      dp_exrate = 1;
    }
    try {
      await axios.post('/api/admin/import/deposit/temp/add', {
        vendor_id, vendor_name,
        po_no: extraForm.po_no,
        style_no: showStyle,
        dp_amount_rmb, dp_amount_usd, dp_exrate,
        dp_date: '', // 적용시 채움
        comment: extraForm.comment
      });
      setExtraForm({ extra_no: '', po_no: '', rate_apply: '', comment: '', amount: '' });
      setAutoGeneratedPoNo('');
      fetchDepositTemp();
      alert('Extra Pay 임시저장 완료');
    } catch (err) {
      alert('Extra Pay 임시입력 오류');
    }
  };

  // 임시테이블 row 삭제
  const handleRemoveRow = async (row) => {
    try {
      await axios.delete(`/api/admin/import/deposit/temp/delete/${row.id}`);
      fetchDepositTemp();
    } catch {
      alert('삭제 오류');
    }
  };

  // 검색
  const handleSearch = () => {
    setFiltered(
      records.filter(r =>
        (!search.dp_date || (r.dp_date && r.dp_date === search.dp_date)) &&
        (!search.style || r.style_no?.toLowerCase().includes(search.style.toLowerCase())) &&
        (!search.po_no || r.po_no?.toLowerCase().includes(search.po_no.toLowerCase()))
      )
    );
  };
  useEffect(() => { setFiltered(records); }, [records]);

  // PayDate, 환율 적용 (DP Amount(RMB)값이 0이 아니면 모두 자동 계산)
  const applyExRate = () => {
    if (!dpDate || !exRate) {
      alert('Pay Date와 Exchange Rate를 입력하세요');
      return;
    }
    setRecords(recs =>
      recs.map(r => {
        if (Number(r.dp_amount_rmb) === 0) {
          // 0이면 DP Date만, 나머지는 건드리지 않음
          return {
            ...r,
            dp_date: dpDate,
            // 나머지 필드는 기존 값 그대로
          };
        }
        // 0이 아니면 DP Date, E.rate, Amount(USD) 자동 입력
        return {
          ...r,
          dp_date: dpDate,
          dp_exrate: exRate,
          dp_amount_usd: exRate ? (parseFloat(r.dp_amount_rmb) / parseFloat(exRate)).toFixed(2) : '',
        };
      })
    );
  };

  // 합계 (0이 아닌 것만 합계에 포함)
  useEffect(() => {
    let totalRmb = 0, totalUsd = 0;
    for (const r of records) {
      if (Number(r.dp_amount_rmb)) totalRmb += Number(r.dp_amount_rmb);
      if (r.dp_amount_usd && !isNaN(Number(r.dp_amount_usd))) totalUsd += Number(r.dp_amount_usd);
    }
    setTotalRmb(totalRmb);
    setTotalUsd(totalUsd);
  }, [records]);

  // Pay: 임시테이블 → 실테이블 커밋
  const handlePay = async () => {
    if (!dpDate || !exRate) return alert('DP Date/Exchange Rate를 입력하세요');
    try {
      await axios.post('/api/admin/import/deposit/temp/commit', { dp_date: dpDate, dp_exrate: exRate });
      alert('정상적으로 저장(커밋) 완료!');
      navigate('/admin/import/po');
    } catch (err) {
      alert('저장 중 오류');
    }
  };

  const handleViewPdf = () => {
    window.open(`/api/admin/import/deposit/pdf?date=${dpDate}&exrate=${exRate}`, '_blank');
  };

  const handleCommentChange = (id, val) => {
    setComments(c => ({ ...c, [id]: val }));
  };

  // --- TABLE HEADER & BODY 구성: 첨부 이미지와 요구에 맞게 ---
  return (
    <div className={styles.page}>
      <h2>Extra Pay Input</h2>
      <div className={styles.formRow}>
        <select name="extra_no" value={extraForm.extra_no} onChange={handleExtraChange}>
          <option value="">선택: Extra no.</option>
          {extraList.map(x => (
            <option key={x.id} value={x.extra_no}>{x.extra_no}</option>
          ))}
        </select>
        <input name="po_no" placeholder="Extra PO no." value={autoGeneratedPoNo} readOnly />
        <select name="rate_apply" value={autoRateApply || extraForm.rate_apply} onChange={handleExtraChange} readOnly>
          <option value="">선택</option>
          <option value="환율적용">환율적용</option>
          <option value="환율비적용">환율비적용</option>
        </select>
        <input name="comment" placeholder="Comment" value={extraForm.comment} onChange={handleExtraChange} />
        <input type="number" name="amount" placeholder="Extra Amount" value={extraForm.amount} onChange={handleExtraChange} />
        <button type="button" onClick={handleAddExtra}>Extra Pay Add</button>
      </div>

      <h2>Deposit Pay List</h2>
      {/* 검색 */}
      <div className={styles.formRow}>
        <input type="date" placeholder="DP Date" value={search.dp_date} onChange={e => setSearch(s => ({ ...s, dp_date: e.target.value }))} />
        <input placeholder="Style" value={search.style} onChange={e => setSearch(s => ({ ...s, style: e.target.value }))} />
        <input placeholder="PO no." value={search.po_no} onChange={e => setSearch(s => ({ ...s, po_no: e.target.value }))} />
        <button type="button" onClick={handleSearch}>검색</button>
      </div>

      {/* Pay Date/Exchange Rate/적용/PDF/Pay */}
      <div className={styles.formRow} style={{ alignItems: 'center', marginBottom: 12 }}>
        <span style={{ fontWeight: 'bold', marginRight: 8 }}>Pay Date</span>
        <input type="date" value={dpDate} onChange={e => setDpDate(e.target.value)} style={{ width: 140 }} />
        <span style={{ fontWeight: 'bold', margin: '0 8px 0 20px' }}>Exchange Rate</span>
        <input type="number" step="0.0001" value={exRate} onChange={e => setExRate(e.target.value)} style={{ width: 120 }} />
        <button type="button" onClick={applyExRate} style={{ margin: '0 20px', fontWeight: 'bold' }}>환율적용</button>
        <button type="button" onClick={handleViewPdf} style={{ fontWeight: 'bold', marginRight: 8 }}>PDF 보기</button>
        <button type="button" onClick={handlePay} style={{ fontWeight: 'bold' }}>Pay</button>
      </div>

      {/* Deposit Pay Table */}
      <div className={styles.list} style={{ overflowX: 'auto' }}>
        <table className="compactTable">
          <thead>
            <tr>
              <th>선택제거</th>
              <th>Vendor Name</th>
              <th>Vendor Rate</th>
              <th>PO Date</th>
              <th>Style</th>
              <th>PO No.</th>
              <th>pcs</th>
              <th>cost(RMB)</th>
              <th>T.Amount(RMB)</th>
              <th>DB Amount(RMB)</th>
              <th>DP Date</th>
              <th>DP E.rate</th>
              <th>DP Amount(USD)</th>
              <th>Comment</th>
            </tr>
          </thead>
          <tbody>
            {(filtered.length ? filtered : records).map(r => (
              <tr key={r.id}>
                <td>
                  <button type="button" onClick={() => handleRemoveRow(r)}>선택제거</button>
                </td>
                <td>{r.vendor_name}</td>
                <td>{r.deposit_rate || ''}</td>
                <td>{r.po_date ? String(r.po_date).split('T')[0] : ''}</td>
                <td>{r.style_no}</td>
                <td>{r.po_no}</td>
                <td>{r.pcs}</td>
                <td>{r.cost_rmb}</td>
                <td>{r.pcs && r.cost_rmb ? (Number(r.pcs) * Number(r.cost_rmb)).toFixed(2) : ''}</td>
                <td>{r.dp_amount_rmb}</td>
                <td>{r.dp_date || ''}</td>
                <td>{r.dp_exrate || ''}</td>
                <td>{r.dp_amount_usd || ''}</td>
                <td>
                  <input
                    value={comments[r.id] ?? r.comment ?? ''}
                    onChange={e => handleCommentChange(r.id, e.target.value)}
                    placeholder="Comment"
                  />
                </td>
              </tr>
            ))}
          </tbody>
          <tfoot>
            <tr>
              <td colSpan={9} style={{ textAlign: 'right', fontWeight: 'bold' }}>합계</td>
              <td style={{ fontWeight: 'bold', color: 'darkred' }}>
                {totalRmb.toLocaleString()}
              </td>
              <td colSpan={2}></td>
              <td style={{ fontWeight: 'bold', color: 'darkred' }}>
                {totalUsd.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
              </td>
              <td></td>
            </tr>
          </tfoot>
        </table>
      </div>
    </div>
  );
};

export default ImportDepositPage;
